{"ast":null,"code":"var _jsxFileName = \"/Users/mitchrobards/React Project/weather-app/src/weather.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport WeatherComponent from './weathercomponent';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STORAGE_KEY = \"weatherComponents\";\nfunction Weather() {\n  _s();\n  const api = {\n    key: 'fca1d839270b44785afc07f9cb794775',\n    base: 'https://api.openweathermap.org/data/2.5'\n  };\n  const [weatherData, setWeatherData] = useState({});\n  const [city, setCity] = useState(\"\");\n  const [componentInstances, setComponentInstances] = useState([]);\n\n  // Load components from local storage on component mount\n  useEffect(() => {\n    const storedComponents = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];\n    setComponentInstances(storedComponents);\n  }, []); // Empty dependency array ensures it runs only once on mount\n\n  const getWeather = event => {\n    if (event.key === \"Enter\") {\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api.key}&units=imperial`).then(response => response.json()).then(data => {\n        setWeatherData(data);\n        setCity(\"\");\n\n        // Create a new Weather component and add it to the instances\n        const newWeatherComponent = /*#__PURE__*/_jsxDEV(WeatherComponent, {\n          prop1: data.name,\n          prop2: Math.round(data.main.temp),\n          prop3: data.weather[0].main,\n          onDelete: () => handleDelete(componentInstances.length)\n        }, componentInstances.length, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this);\n\n        // Update state and local storage\n        setComponentInstances([...componentInstances, newWeatherComponent], () => {\n          localStorage.setItem(STORAGE_KEY, JSON.stringify([...componentInstances, newWeatherComponent]));\n        });\n      });\n    }\n  };\n  const handleDelete = index => {\n    const updatedInstances = [...componentInstances];\n    updatedInstances.splice(index, 1);\n\n    // Update state and local storage\n    setComponentInstances(updatedInstances, () => {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedInstances));\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input\",\n      placeholder: \"Enter Location\",\n      onChange: e => setCity(e.target.value),\n      value: city,\n      onKeyDown: getWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), typeof weatherData.main === 'undefined' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Welcome to WeatherApp. Enter a city to get started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), componentInstances.map((component, index) => ( /*#__PURE__*/React.cloneElement(component, {\n      key: index,\n      onDelete: () => handleDelete(index)\n    })))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(Weather, \"eBlR4Z2Rbj0yjZ9Fdik2KhgWKaM=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","WeatherComponent","jsxDEV","_jsxDEV","STORAGE_KEY","Weather","_s","api","key","base","weatherData","setWeatherData","city","setCity","componentInstances","setComponentInstances","storedComponents","JSON","parse","localStorage","getItem","getWeather","event","fetch","then","response","json","data","newWeatherComponent","prop1","name","prop2","Math","round","main","temp","prop3","weather","onDelete","handleDelete","length","fileName","_jsxFileName","lineNumber","columnNumber","setItem","stringify","index","updatedInstances","splice","className","children","placeholder","onChange","e","target","value","onKeyDown","map","component","cloneElement","_c","$RefreshReg$"],"sources":["/Users/mitchrobards/React Project/weather-app/src/weather.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport WeatherComponent from './weathercomponent';\nimport './App.css';\n\nconst STORAGE_KEY = \"weatherComponents\";\n\nfunction Weather() {\n  const api = {\n    key: 'fca1d839270b44785afc07f9cb794775',\n    base: 'https://api.openweathermap.org/data/2.5',\n  };\n\n  const [weatherData, setWeatherData] = useState({});\n  const [city, setCity] = useState(\"\");\n  const [componentInstances, setComponentInstances] = useState([]);\n\n  // Load components from local storage on component mount\n  useEffect(() => {\n    const storedComponents = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];\n    setComponentInstances(storedComponents);\n  }, []); // Empty dependency array ensures it runs only once on mount\n\n  const getWeather = (event) => {\n    if (event.key === \"Enter\") {\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api.key}&units=imperial`)\n        .then(response => response.json())\n        .then(data => {\n          setWeatherData(data);\n          setCity(\"\");\n\n          // Create a new Weather component and add it to the instances\n          const newWeatherComponent = (\n            <WeatherComponent\n              key={componentInstances.length}\n              prop1={data.name}\n              prop2={Math.round(data.main.temp)}\n              prop3={data.weather[0].main}\n              onDelete={() => handleDelete(componentInstances.length)}\n            />\n          );\n\n          // Update state and local storage\n          setComponentInstances([...componentInstances, newWeatherComponent], () => {\n            localStorage.setItem(STORAGE_KEY, JSON.stringify([...componentInstances, newWeatherComponent]));\n          });\n        });\n    }\n  };\n\n  const handleDelete = (index) => {\n    const updatedInstances = [...componentInstances];\n    updatedInstances.splice(index, 1);\n\n    // Update state and local storage\n    setComponentInstances(updatedInstances, () => {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedInstances));\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <input\n        className=\"input\"\n        placeholder=\"Enter Location\"\n        onChange={(e) => setCity(e.target.value)}\n        value={city}\n        onKeyDown={getWeather}\n      />\n\n      {typeof weatherData.main === 'undefined' && (\n        <div>\n          <p>Welcome to WeatherApp. Enter a city to get started</p>\n        </div>\n      )}\n\n      {componentInstances.map((component, index) => (\n        React.cloneElement(component, { key: index, onDelete: () => handleDelete(index) })\n      ))}\n    </div>\n  );\n}\n\nexport default Weather;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}